// Flex
//
// Markup: Will wrap anything inside of the curly brackets with a .dark class to use with a dark theme.
// .class {
// @include flex($direction: row, $align: center, $justify: center, $wrap: wrap, $align-content: stretch)
// }
//   - Inserts flex-box css rules
//     - $direction: row | row-reverse | column | column-reverse
//     - $align: stretch | flex-start | flex-end | center | baseline
//     - $justify: flex-start | flex-end | center | space-between | space-around | space-evenly
//     - $wrap: nowrap | wrap | wrap-reverse
//     - $align-content: flex-start | flex-end | center | space-between | space-around | stretch
//
// Styleguide Layout.flex

@mixin flex(
  $direction: row,
  $align: center,
  $justify: center,
  $wrap: wrap,
  $align-content: stretch
) {
  display: flex;
  flex-direction: $direction;
  align-items: $align;
  justify-content: $justify;
  flex-wrap: $wrap;
  align-content: $align-content;
}

// Flex Form
//
// Markup: Works with flex() and flex-form() to create column stacked elements with a .form-row class with horizontal flexed insides
// .class {
// @include flex-form($direction: row, $align: center, $justify: center, $wrap: wrap, $align-content: stretch)
// }
//
//
// Styleguide Layout.flex-form
@mixin flex-form() {
  @include flex(column, stretch, center, nowrap);

  .form-row {
    @include flex-form-row();
  }
}

// Flex Form Row
//
// Markup: Works with flex() to layout mat-form-fields in a horizontal row
// .class {
// @include flex-form-row()
// }
//
//
// Styleguide Layout.flex-form-row
@mixin flex-form-row() {
  @include flex(row, center, stretch, nowrap);

  .mat-form-field {
    flex: 1 0 auto;
  }
}

// Flex directive
//
// Markup: Allows the use ".flex" or "flex" attribute to stretch elements. This is to match AngularJS's version of flexbox
// .class {
// @include flex;
// }
//
// Styleguide Layout.flex-form
@mixin flex-directive() {
  .flex,
  [flex],
  flex {
    flex: 1 0 auto;
  }
}

// Root Container Height
//
// Markup: Inserts height, overflow, margin and padding of container with the basis off 100 view height
// .class {
// @include setRootContainerHeight(0,0);
// }
//
// Styleguide Layout.root-container
@mixin setRootContainerHeight($margin: 0, $padding: 0) {
  $totalMargin: $margin * 2;
  $totalPadding: $padding * 2;

  @media screen and (max-width: 600px) {
    height: calc(100vh - #{$totalMargin}px);
    overflow-y: auto;
    margin: #{$margin}px;
    padding: #{$padding}px;
  }

  @media screen and (min-width: 601px) {
    height: calc(100vh - #{$totalMargin}px);
    overflow-y: auto;
    margin: #{$margin}px;
    padding: #{$padding}px;
  }
}

// Container Height
//
// Markup: Inserts height, overflow, margin and padding of container with the basis off 100 view height minus a mat-toolbar height in both mobile and desktop resolutions.
// .class {
// @include setHeightContainer(0,0);
// }
//
// Styleguide Layout.container-height
@mixin setContainerHeight($margin: 0, $padding: 0) {
  $totalMargin: $margin * 2;
  $totalPadding: $padding * 2;

  @media screen and (max-width: 600px) {
    height: calc(100vh - 56px - #{$totalMargin}px);
    overflow-y: auto;
    margin: #{$margin}px;
    padding: #{$padding}px;
  }

  @media screen and (min-width: 601px) {
    height: calc(100vh - 64px - #{$totalMargin}px);
    overflow-y: auto;
    margin: #{$margin}px;
    padding: #{$padding}px;
  }

  @include media-iphone-portrait {
    height: calc(100vh - 64px - #{$totalMargin}px - 66px);
    overflow-y: auto;
    margin: #{$margin}px;
    padding: #{$padding}px;
  }
}

// Container Height with Toolbars
//
// Markup: Same as setContainerHeight but takes in a required toolbar param to offset for any sub toolbars.
// .class {
// @include setContainerHeightWithToolbars(0,0,1);
// }
//
// Styleguide Layout.container-height
@mixin setContainerHeightWithToolbars($margin: 0, $padding: 0, $toolbars: 0) {
  $totalMargin: $margin * 2;
  $totalPadding: $padding * 2;

  @media screen and (max-width: 600px) {
    height: calc(100vh - (#{$toolbars} * 56px) - #{$totalMargin}px);
    overflow-y: auto;
    margin: #{$margin}px;
    padding: #{$padding}px;
  }

  @media screen and (min-width: 601px) {
    height: calc(100vh - (#{$toolbars} * 64px) - #{$totalMargin}px);
    overflow-y: auto;
    margin: #{$margin}px;
    padding: #{$padding}px;
  }
}
